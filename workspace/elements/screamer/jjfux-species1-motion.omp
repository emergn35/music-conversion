; OM File Header - Saved 2016/01/26 0:05:14
; (6.050102 :patc (om-make-point 118 10) (om-make-point 511 44) (om-make-point 532 416) "" 183 0 "2015/10/22 21:37:32" "2015/11/08 12:21:11")
; End File Header
(in-package :om)(load-lib-for (quote ("t2l-lib")))(setf *om-current-persistent* (om-load-patch1 "jjfux-species1-motion" (quote ((om-load-boxcall (quote abstraction) "1st-species 4" (om-load-patch-abs1 "1st-species 4" (quote ((om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 350 911) (om-make-point 35 28) 120 "120" nil) (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 184 495) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 243 494) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 680 698) nil nil nil nil 1) (om-load-boxcall (quote genfun) "JJF-SPECIES1-MOTION" (quote t2l:jjf-species1-motion) (quote ((om-load-inputfun (quote input-funbox) "" "V" nil) (om-load-inputfun (quote input-funbox) "" "CF" nil))) (om-make-point 157 555) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 527 602) (om-make-point 18 28) (quote t) "t" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 406 602) (om-make-point 18 28) (quote t) "t" nil) (om-load-boxcall (quote genfun) "OM-ASSERT! 3" (quote t2l:om-assert!) (quote ((om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 168 632) (om-make-point 607 47) nil "&" nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 367 197) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 380 151) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LIST-PCSET-MEMBERV 2" (quote t2l:list-pcset-memberv) (quote ((om-load-inputfun (quote input-funbox) "" "MODE-PCSET" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 132 183) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 206 153) (om-make-point 115 28) (list 0 2 4 5 7 9 1 11) "(0 2 4 5 7 9 1 11)" nil) (om-load-boxcall (quote genfun) "OM-ASSERT! 2" (quote t2l:om-assert!) (quote ((om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 165 246) (om-make-point 269 47) (list (list (list 62 65 64 71 60 62) (list nil nil nil nil nil nil))) "&" nil 1) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 139 49) (om-make-point 35 28) 127 "127" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 108 49) (om-make-point 21 28) 0 "0" nil) (om-load-boxcall (quote genfun) "MAKE-SCREAMER-VARS" (quote t2l:make-screamer-vars) (quote ((om-load-inputfun (quote input-funbox) "" "LIST" nil) (om-load-inputkeyword (quote input-keyword) "" "min" (quote :min) nil nil) (om-load-inputkeyword (quote input-keyword) "" "max" (quote :max) nil nil))) (om-make-point 50 79) nil (list (list nil nil nil nil nil nil)) "&" nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 372 14) (om-make-point 128 28) (list 62 65 64 71 60 62) "(62 65 64 71 60 62)" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 227 699) (om-make-point 21 28) 0 "0" nil) (om-load-boxcall (quote abstraction) "write-measure-list" (om-load-patch-abs1 "write-measure-list" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 79 41) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 168 181) (om-make-point 42 28) (list 4 4) "(4 4)" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 129 181) (om-make-point 30 28) (quote list) "list" nil) (om-load-boxcall (quote lispfun) "MAKE-SEQUENCE" (quote make-sequence) (quote ((om-load-inputfun (quote input-funbox) "TYPE" "TYPE" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil) (om-load-inputkeyword (quote input-keyword) "" "initial-element" (quote :initial-element) nil nil))) (om-make-point 100 211) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 62) (om-make-point 21 28) 2 "2" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 108 92) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CEILING" (quote ceiling) (quote ((om-load-inputfun (quote input-funbox) "M" "M" nil))) (om-make-point 93 138) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil (list 60 64) nil))) (quote ((8 0 0 0 nil 0) (2 0 3 0 nil 0) (6 0 3 1 nil 0) (1 0 3 2 nil 0) (0 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 0 nil 0) (3 0 7 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 637 748) nil nil nil "write-measure-list") (om-load-boxcall (quote genfun) "OM-ITH-SOLUTION" (quote t2l:om-ith-solution) (quote ((om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 261 729) nil nil "&" nil 1) (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 245 1020) (om-make-point 404 184) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7300)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 120) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (4 (((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7100)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (1000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 120) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.050102 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (list (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 445) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SEQC->POLY" (quote t2l:seqc->poly) (quote ((om-load-inputfun (quote input-funbox) "" "SEQC" (list (list 60))) (om-load-inputfun (quote input-funbox) "" "RHYTHM-TREES" (list (list (quote ?) (list (list (list 4 4) (list -1)))) -1)) (om-load-inputkeyword (quote input-keyword) "" "bpm" (quote :bpm) nil nil))) (om-make-point 303 941) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SCALE-MS-EVENTS" (quote t2l:scale-ms-events) (quote ((om-load-inputfun (quote input-funbox) "" "DURATIONS" (list (list 1 2 3 4 5 6 7))) (om-load-inputfun (quote input-funbox) "" "MS" (list (list 5 4) (list 3 4) (list 3 4) (list 4 4))) (om-load-inputfun (quote input-funbox) "" "MODULUS" (list 8 (list 1 1))))) (om-make-point 482 864) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FUNCALL-REC" (quote t2l::funcall-rec) (quote ((om-load-inputfun (quote input-funbox) "FN" "FN" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 448 817) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "cf-timepoint" (om-load-patch-abs1 "cf-timepoint" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 23 210) (om-make-point 21 28) 2 "2" nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((0 0 2 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 434 749) nil nil "l" "cf-timepoint") (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 643 833) (om-make-point 63 28) (list 4 (list 1 1)) "(4 (1 1))" nil))) (quote ((12 0 1 0 nil 0) (12 0 2 0 nil 0) (7 0 3 0 nil 0) (1 0 4 0 nil 0) (2 0 4 1 nil 0) (4 0 7 0 nil 0) (6 0 7 1 nil 0) (5 0 7 2 nil 0) (12 0 7 3 nil 0) (9 0 8 0 nil 0) (15 0 9 0 nil 0) (16 0 9 1 nil 0) (15 0 10 0 nil 0) (11 0 10 1 nil 0) (10 0 12 0 nil 0) (8 0 12 1 nil 0) (16 0 15 0 nil 0) (14 0 15 1 nil 0) (13 0 15 2 nil 0) (3 0 18 0 nil 0) (17 0 19 0 nil 0) (7 0 19 1 nil 0) (21 0 20 0 nil 0) (19 0 21 0 nil 0) (22 0 21 1 nil 0) (0 0 21 2 nil 0) (23 0 22 0 nil 0) (18 0 22 1 nil 0) (25 0 22 2 nil 0) (24 0 23 0 nil 0) (19 0 23 1 nil 0))) 6.050102 nil "" (om-make-point 800 0) (om-make-point 784 792)) (quote nil) (om-make-point 53 198) nil nil nil "1st-species 4") (om-load-boxcomment "comment" (om-make-point 84 32) (quote "backups") "" (om-make-point 196 67) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "1st-species 3" (om-load-patch-abs1 "1st-species 3" (quote ((om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 220 42) (om-make-point 104 28) (list 2 4 5 7 9 11 0) "(2 4 5 7 9 11 0)" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 90 42) (om-make-point 128 28) (list 62 65 67 65 64 62) "(62 65 67 65 64 62)" nil) (om-load-boxcall (quote genfun) "JJF-1ST-SPECIES1" (quote t2l:jjf-1st-species1) (quote ((om-load-inputfun (quote input-funbox) "" "CF" nil) (om-load-inputfun (quote input-funbox) "" "MODE" nil))) (om-make-point 148 72) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ITH-SOLUTION" (quote t2l:om-ith-solution) (quote ((om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 44 133) nil nil "&" nil 1) (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 28 425) (om-make-point 404 184) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (-1)) (1 (-1)))) ((4 4) ((1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (-1)) (1 (-1)))) ((4 4) ((1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (list (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 445) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SEQC->POLY" (quote t2l:seqc->poly) (quote ((om-load-inputfun (quote input-funbox) "" "SEQC" (list (list 60))) (om-load-inputfun (quote input-funbox) "" "RHYTHM-TREES" (list (list (quote ?) (list (list (list 4 4) (list -1)))) -1)))) (om-make-point 86 345) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SCALE-MS-EVENTS" (quote t2l:scale-ms-events) (quote ((om-load-inputfun (quote input-funbox) "" "DURATIONS" (list (list 1 2 3 4 5 6 7))) (om-load-inputfun (quote input-funbox) "" "MS" (list (list 5 4) (list 3 4) (list 3 4) (list 4 4))) (om-load-inputfun (quote input-funbox) "" "MODULUS" (list 8 (list 1 1))))) (om-make-point 236 268) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FUNCALL-REC" (quote t2l::funcall-rec) (quote ((om-load-inputfun (quote input-funbox) "FN" "FN" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 231 221) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "cf-timepoint" (om-load-patch-abs1 "cf-timepoint" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 23 210) (om-make-point 21 28) 2 "2" nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((0 0 2 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 217 153) nil nil "l" "cf-timepoint") (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 293 214) (om-make-point 180 28) (list (list 4 4) (list 4 4) (list 4 4) (list 4 4) (list 4 4)) "((4 4) (4 4) (4 4) (4 4) (4 4))" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 373 237) (om-make-point 63 28) (list 4 (list 1 1)) "(4 (1 1))" nil))) (quote ((1 0 2 0 nil 0) (0 0 2 1 nil 0) (2 0 3 1 nil 0) (5 0 4 0 nil 0) (3 0 5 0 nil 0) (6 0 5 1 nil 0) (7 0 6 0 nil 0) (9 0 6 1 nil 0) (10 0 6 2 nil 0) (8 0 7 0 nil 0) (3 0 7 1 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote nil) (om-make-point 223 141) nil nil nil "1st-species 3") (om-load-boxcall (quote abstraction) "1st-species 2" (om-load-patch-abs1 "1st-species 2" (quote ((om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 235 510) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 175 489) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 680 698) nil nil nil nil 1) (om-load-boxcall (quote genfun) "JJF-SPECIES1-MOTION" (quote t2l:jjf-species1-motion) (quote ((om-load-inputfun (quote input-funbox) "" "V" nil) (om-load-inputfun (quote input-funbox) "" "CF" nil))) (om-make-point 157 556) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 9" (quote t) (quote nil) (om-make-point 527 602) (om-make-point 18 28) (quote t) "t" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 406 602) (om-make-point 18 28) (quote t) "t" nil) (om-load-boxcall (quote genfun) "OM-ASSERT! 3" (quote t2l:om-assert!) (quote ((om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 168 632) (om-make-point 607 47) nil "&" nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 350 911) (om-make-point 18 28) (quote t) "t" nil) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 367 197) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "LIST 2" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 380 151) nil nil nil nil 1) (om-load-boxcall (quote genfun) "LIST-PCSET-MEMBERV 2" (quote t2l:list-pcset-memberv) (quote ((om-load-inputfun (quote input-funbox) "" "MODE-PCSET" nil) (om-load-inputfun (quote input-funbox) "" "LIST" nil))) (om-make-point 132 183) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 206 153) (om-make-point 104 28) (list 0 2 4 5 7 9 11) "(0 2 4 5 7 9 11)" nil) (om-load-boxcall (quote genfun) "OM-ASSERT! 2" (quote t2l:om-assert!) (quote ((om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 165 246) (om-make-point 269 47) nil "&" nil 1) (om-load-boxcall (quote abstraction) "seqc-tonic-rule" (om-load-patch-abs1 "seqc-tonic-rule" (quote ((om-load-boxcall (quote lispfun) "=V 3" (quote screamer:=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 158 493) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "ORV" (quote screamer:orv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 43 537) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "=V 2" (quote screamer:=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 41 464) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "=V" (quote screamer:=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 102 490) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR 4" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 66 127) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 132 126) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "ANDV" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 82 571) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 204 317) (om-make-point 21 28) 7 "7" nil) (om-load-boxcall (quote lispfun) "+V" (quote screamer:+v) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 190 347) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 229 362) (om-make-point 28 28) 12 "12" nil) (om-load-boxcall (quote lispfun) "MODV 4" (quote t2l::modv) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "D" "D" nil))) (om-make-point 207 392) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 78 620) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil (om-make-point 48 58)) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 251 260) (om-make-point 28 28) 12 "12" nil) (om-load-boxcall (quote lispfun) "MODV 3" (quote t2l::modv) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "D" "D" nil))) (om-make-point 229 290) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 160 260) (om-make-point 28 28) 12 "12" nil) (om-load-boxcall (quote lispfun) "MODV 2" (quote t2l::modv) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "D" "D" nil))) (om-make-point 138 290) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 97 260) (om-make-point 28 28) 12 "12" nil) (om-load-boxcall (quote lispfun) "MODV" (quote t2l::modv) (quote ((om-load-inputfun (quote input-funbox) "N" "N" nil) (om-load-inputfun (quote input-funbox) "D" "D" nil))) (om-make-point 75 290) nil nil "&" nil 1) (om-load-boxcall (quote lispfun) "CAR 3" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 62 224) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE 2" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 53 177) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR 2" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 230 218) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "REVERSE" (quote reverse) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 221 171) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 133 186) nil nil nil nil 1) (om-load-boxin "seqc" 0 (om-make-point 55 33) "" "seqc" nil nil))) (quote ((17 0 0 0 nil 0) (13 0 0 1 nil 0) (2 0 1 0 nil 0) (3 0 1 1 nil 0) (17 0 2 0 nil 0) (10 0 2 1 nil 0) (17 0 3 0 nil 0) (15 0 3 1 nil 0) (23 0 4 0 nil 0) (23 0 5 0 nil 0) (1 0 6 0 nil 0) (0 0 6 1 nil 0) (15 0 8 0 nil 0) (7 0 8 1 nil 0) (8 0 10 0 nil 0) (9 0 10 1 nil 0) (6 0 11 0 nil 0) (20 0 13 0 nil 0) (12 0 13 1 nil 0) (22 0 15 0 nil 0) (14 0 15 1 nil 0) (18 0 17 0 nil 0) (16 0 17 1 nil 0) (19 0 18 0 nil 0) (4 0 19 0 nil 0) (21 0 20 0 nil 0) (5 0 21 0 nil 0) (5 0 22 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "cf" nil))) (om-make-point 155 327) nil nil nil "seqc-tonic-rule") (om-load-boxcall (quote abstraction) "seqc-vertical-spacing-rule" (om-load-patch-abs1 "seqc-vertical-spacing-rule" (quote ((om-load-boxcall (quote abstraction) "voice-overlap-rule-fn" (om-load-patch-abs1 "voice-overlap-rule-fn" (quote ((om-load-boxcall (quote lispfun) "<=V" (quote screamer:<=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 57 347) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 62 118) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 35 139) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 47 393) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((2 0 0 0 nil 0) (1 0 0 1 nil 0) (4 0 1 0 nil 0) (4 0 2 0 nil 0) (0 0 3 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 56 161) nil nil "l" "voice-overlap-rule-fn") (om-load-boxcall (quote lispfun) "MAPCAR" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 100 227) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ALL-ANDV" (quote t2l:all-andv) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 96 275) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "ANDV" (quote screamer:andv) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 37 371) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "mypatch 2" (om-load-patch-abs1 "mypatch" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 74 291) (om-make-point 28 28) 15 "15" nil) (om-load-boxcall (quote lispfun) "<=V" (quote screamer:<=v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 58 321) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CADR" (quote cadr) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 62 118) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 35 139) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "ABSV" (quote t2l::absv) (quote ((om-load-inputfun (quote input-funbox) "K" "K" nil))) (om-make-point 58 249) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "-V" (quote screamer:-v) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 61 196) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 47 393) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil))) (quote ((4 0 1 0 nil 0) (0 0 1 1 nil 0) (7 0 2 0 nil 0) (7 0 3 0 nil 0) (5 0 4 0 nil 0) (3 0 5 0 nil 0) (2 0 5 1 nil 0) (1 0 6 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 4 161) nil nil "l" "mypatch") (om-load-boxcall (quote lispfun) "MAPCAR 2" (quote mapcar) (quote ((om-load-inputfun (quote input-funbox) "FUNCTION" "FUNCTION" nil) (om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 14 227) nil nil nil nil 1) (om-load-boxcall (quote genfun) "ALL-ANDV 2" (quote t2l:all-andv) (quote ((om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 10 275) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "MAT-TRANS" (quote t2l::mat-trans) (quote ((om-load-inputfun (quote input-funbox) "LL" "LL" nil))) (om-make-point 164 182) nil nil "&" nil 1) (om-load-boxcall (quote lispfun) "FLATTEN-SEQC" (quote t2l::flatten-seqc) (quote ((om-load-inputfun (quote input-funbox) "LIST" "LIST" nil))) (om-make-point 161 134) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 5 441) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "seqc" 0 (om-make-point 5 45) "" "seqc" nil nil))) (quote ((0 0 1 0 nil 0) (7 0 1 1 nil 0) (1 0 2 0 nil 0) (6 0 3 0 nil 0) (2 0 3 1 nil 0) (4 0 5 0 nil 0) (7 0 5 1 nil 0) (5 0 6 0 nil 0) (8 0 7 0 nil 0) (10 0 8 0 nil 0) (3 0 9 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 400 500)) (quote ((om-load-inputfun (quote input-funbox) "" "seqc" nil))) (om-make-point 250 327) nil nil nil "seqc-vertical-spacing-rule") (om-load-boxcall (quote genfun) "SEQC-PARALLEL-5TH-RULE" (quote t2l:seqc-parallel-5th-rule) (quote ((om-load-inputfun (quote input-funbox) "" "SEQC" nil))) (om-make-point 400 329) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 8" (quote t) (quote nil) (om-make-point 139 49) (om-make-point 35 28) 127 "127" nil) (om-load-boxcall (quote bastype) "aux 7" (quote t) (quote nil) (om-make-point 108 49) (om-make-point 21 28) 0 "0" nil) (om-load-boxcall (quote genfun) "MAKE-SCREAMER-VARS" (quote t2l:make-screamer-vars) (quote ((om-load-inputfun (quote input-funbox) "" "LIST" nil) (om-load-inputkeyword (quote input-keyword) "" "min" (quote :min) nil nil) (om-load-inputkeyword (quote input-keyword) "" "max" (quote :max) nil nil))) (om-make-point 50 79) nil nil "&" nil 1) (om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 372 14) (om-make-point 128 28) (list 62 65 64 62 60 62) "(62 65 64 62 60 62)" nil) (om-load-boxcall (quote genfun) "OM-ASSERT!" (quote t2l:om-assert!) (quote ((om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil) (om-load-inputfun (quote input-funbox) "" "SEQUENCE" nil))) (om-make-point 167 407) (om-make-point 607 47) nil "&" nil 1) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 227 699) (om-make-point 21 28) 0 "0" nil) (om-load-boxcall (quote abstraction) "write-measure-list" (om-load-patch-abs1 "write-measure-list" (quote ((om-load-boxcall (quote lispfun) "LENGTH" (quote length) (quote ((om-load-inputfun (quote input-funbox) "SEQUENCE" "SEQUENCE" nil))) (om-make-point 79 41) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 168 181) (om-make-point 42 28) (list 4 4) "(4 4)" nil) (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 129 181) (om-make-point 30 28) (quote list) "list" nil) (om-load-boxcall (quote lispfun) "MAKE-SEQUENCE" (quote make-sequence) (quote ((om-load-inputfun (quote input-funbox) "TYPE" "TYPE" nil) (om-load-inputfun (quote input-funbox) "LENGTH" "LENGTH" nil) (om-load-inputkeyword (quote input-keyword) "" "initial-element" (quote :initial-element) nil nil))) (om-make-point 100 211) nil nil nil nil 1) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 118 62) (om-make-point 21 28) 2 "2" nil) (om-load-boxcall (quote genfun) "OM/" (quote om/) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 1) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 1))) (om-make-point 108 92) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "CEILING" (quote ceiling) (quote ((om-load-inputfun (quote input-funbox) "M" "M" nil))) (om-make-point 93 138) nil nil nil nil 1) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil (list 60 64) nil))) (quote ((8 0 0 0 nil 0) (2 0 3 0 nil 0) (6 0 3 1 nil 0) (1 0 3 2 nil 0) (0 0 5 0 nil 0) (4 0 5 1 nil 0) (5 0 6 0 nil 0) (3 0 7 0 nil 0))) 6.050102 nil "" (om-make-point 903 196) (om-make-point 400 480)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 637 748) nil nil nil "write-measure-list") (om-load-boxcall (quote genfun) "OM-ITH-SOLUTION" (quote t2l:om-ith-solution) (quote ((om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 260 720) nil nil "&" nil 1) (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 246 1020) (om-make-point 404 184) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (3 (((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (list (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 445) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SEQC->POLY" (quote t2l:seqc->poly) (quote ((om-load-inputfun (quote input-funbox) "" "SEQC" (list (list 60))) (om-load-inputfun (quote input-funbox) "" "RHYTHM-TREES" (list (list (quote ?) (list (list (list 4 4) (list -1)))) -1)) (om-load-inputkeyword (quote input-keyword) "" "reverse" (quote :reverse) nil nil))) (om-make-point 303 941) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SCALE-MS-EVENTS" (quote t2l:scale-ms-events) (quote ((om-load-inputfun (quote input-funbox) "" "DURATIONS" (list (list 1 2 3 4 5 6 7))) (om-load-inputfun (quote input-funbox) "" "MS" (list (list 5 4) (list 3 4) (list 3 4) (list 4 4))) (om-load-inputfun (quote input-funbox) "" "MODULUS" (list 8 (list 1 1))))) (om-make-point 482 864) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FUNCALL-REC" (quote t2l::funcall-rec) (quote ((om-load-inputfun (quote input-funbox) "FN" "FN" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 448 817) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "cf-timepoint" (om-load-patch-abs1 "cf-timepoint" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 23 210) (om-make-point 21 28) 2 "2" nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((0 0 2 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 434 749) nil nil "l" "cf-timepoint") (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 643 833) (om-make-point 63 28) (list 4 (list 1 1)) "(4 (1 1))" nil))) (quote ((20 0 0 0 nil 0) (20 0 1 0 nil 0) (6 0 2 0 nil 0) (1 0 3 0 nil 0) (0 0 3 1 nil 0) (3 0 6 0 nil 0) (5 0 6 1 nil 0) (4 0 6 2 nil 0) (20 0 6 3 nil 0) (9 0 8 0 nil 0) (18 0 9 0 nil 0) (19 0 9 1 nil 0) (18 0 10 0 nil 0) (11 0 10 1 nil 0) (10 0 12 0 nil 0) (8 0 12 1 nil 0) (12 0 13 0 nil 0) (12 0 14 0 nil 0) (12 0 15 0 nil 0) (19 0 18 0 nil 0) (17 0 18 1 nil 0) (16 0 18 2 nil 0) (13 0 20 0 nil 0) (14 0 20 1 nil 0) (15 0 20 2 nil 0) (12 0 20 3 nil 0) (2 0 22 0 nil 0) (21 0 23 0 nil 0) (6 0 23 1 nil 0) (25 0 24 0 nil 0) (23 0 25 0 nil 0) (26 0 25 1 nil 0) (7 0 25 2 nil 0) (27 0 26 0 nil 0) (22 0 26 1 nil 0) (29 0 26 2 nil 0) (28 0 27 0 nil 0) (23 0 27 1 nil 0))) 6.050102 nil "" (om-make-point 649 20) (om-make-point 907 712)) (quote nil) (om-make-point 13 121) nil nil nil "1st-species 2") (om-load-boxcall (quote abstraction) "1st-species" (om-load-patch-abs1 "1st-species" (quote ((om-load-boxcall (quote bastype) "aux 6" (quote t) (quote nil) (om-make-point 70 51) (om-make-point 128 28) (list 62 65 67 65 64 62) "(62 65 67 65 64 62)" nil) (om-load-boxcall (quote bastype) "aux 5" (quote t) (quote nil) (om-make-point 200 51) (om-make-point 104 28) (list 2 4 5 7 9 11 0) "(2 4 5 7 9 11 0)" nil) (om-load-boxcall (quote bastype) "aux 4" (quote t) (quote nil) (om-make-point 295 218) (om-make-point 104 28) (list 2 4 5 7 9 11 0) "(2 4 5 7 9 11 0)" nil) (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 165 218) (om-make-point 128 28) (list 62 65 67 65 64 62) "(62 65 67 65 64 62)" nil) (om-load-boxcall (quote genfun) "JJF-1ST-SPECIES1" (quote t2l:jjf-1st-species1) (quote ((om-load-inputfun (quote input-funbox) "" "CF" nil) (om-load-inputfun (quote input-funbox) "" "MODE" nil))) (om-make-point 223 248) nil nil nil nil 1) (om-load-boxcall (quote genfun) "OM-ITH-SOLUTION" (quote t2l:om-ith-solution) (quote ((om-load-inputfun (quote input-funbox) "" "I" nil) (om-load-inputfun (quote input-funbox) "" "X" nil))) (om-make-point 119 309) nil nil "&" nil 1) (om-load-editor-box1 "POLY" (quote poly) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "list of VOICE objects" "voices" (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (1 (((4 4) (1 1 1 1))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6000)) :ldur (quote (1000)) :lvel (quote (100)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj))))) (om-make-point 103 601) (om-make-point 404 184) (if (find-class (quote poly) nil) (let ((newobj (make-instance (quote poly) :voices (list (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (-1)) (1 (-1)))) ((4 4) ((1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6900)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7000)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6800)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (7400)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) (let ((newobj (when (find-class (quote voice) nil) (make-instance (quote voice) :tree (quote (5 (((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (1)) (1 (1)))) ((4 4) ((1 (-1)) (1 (-1)))) ((4 4) ((1 (-1)) (1 (-1))))))) :chords (load-obj-list-from-save (quote ((let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6700)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6500)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6400)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord) (let ((thechord (make-instance (quote chord) :lmidic (quote (6200)) :ldur (quote (2000)) :lvel (quote (80)) :loffset (quote (0)) :lchan (quote (1))))) (load-port-info thechord (quote (0))) (init-mus-color thechord (quote nil)) (set-extra-pairs thechord (quote nil)) (set-tonalite thechord nil) thechord)))) :tempo (quote ((1/4 60) nil)) :legato 100 :ties (quote (nil nil nil nil nil nil)))))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) :from-file t))) (load-port-info newobj (quote (nil nil))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode show-stems scale palette-mode)) (list 2 24 (list (quote g) (quote g)) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1 1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil 0 (quote :midishare) 1 nil 1000 0 (om-make-point 549 445) (om-make-point 400 20) 0 1 (quote t) nil 0)) t nil nil nil) (om-load-boxcall (quote genfun) "SEQC->POLY" (quote t2l:seqc->poly) (quote ((om-load-inputfun (quote input-funbox) "" "SEQC" (list (list 60))) (om-load-inputfun (quote input-funbox) "" "RHYTHM-TREES" (list (list (quote ?) (list (list (list 4 4) (list -1)))) -1)))) (om-make-point 161 521) nil nil nil nil 1) (om-load-boxcall (quote genfun) "SCALE-MS-EVENTS" (quote t2l:scale-ms-events) (quote ((om-load-inputfun (quote input-funbox) "" "DURATIONS" (list (list 1 2 3 4 5 6 7))) (om-load-inputfun (quote input-funbox) "" "MS" (list (list 5 4) (list 3 4) (list 3 4) (list 4 4))) (om-load-inputfun (quote input-funbox) "" "MODULUS" (list 8 (list 1 1))))) (om-make-point 311 444) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "FUNCALL-REC" (quote t2l::funcall-rec) (quote ((om-load-inputfun (quote input-funbox) "FN" "FN" nil) (om-load-inputfun (quote input-funbox) "TREE" "TREE" nil))) (om-make-point 306 397) nil nil nil nil 1) (om-load-boxcall (quote abstraction) "cf-timepoint" (om-load-patch-abs1 "cf-timepoint" (quote ((om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 23 210) (om-make-point 21 28) 2 "2" nil) (om-load-boxin "input" 0 (om-make-point 5 45) "" nil nil nil) (om-load-boxout "output" 0 (om-make-point 5 240) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil))) (quote ((0 0 2 0 nil 0))) 6.050102 nil "" (om-make-point 200 200) (om-make-point 500 400)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 292 329) nil nil "l" "cf-timepoint") (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 368 378) (om-make-point 180 28) (list (list 4 4) (list 4 4) (list 4 4) (list 4 4) (list 4 4)) "((4 4) (4 4) (4 4) (4 4) (4 4))" nil) (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 448 413) (om-make-point 63 28) (list 4 (list 1 1)) "(4 (1 1))" nil))) (quote ((3 0 4 0 nil 0) (2 0 4 1 nil 0) (4 0 5 1 nil 0) (7 0 6 0 nil 0) (5 0 7 0 nil 0) (8 0 7 1 nil 0) (9 0 8 0 nil 0) (11 0 8 1 nil 0) (12 0 8 2 nil 0) (10 0 9 0 nil 0) (5 0 9 1 nil 0))) 6.050102 nil "" (om-make-point 911 96) (om-make-point 517 624)) (quote nil) (om-make-point 183 101) nil nil nil "1st-species"))) (quote nil) nil 6.050102))

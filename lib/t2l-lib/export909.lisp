(in-package :t2l)
; '(7 1 6 2 5 3 4 3 5 2 6 1 7 7 1 6 2 5 3 4 3 5 2 6 1 7) 7 909_12-5-2012-19_36_35

(labels
    ((repeat-list (list size)
       (cond
        ((< size (length list))
         (subseq list 0 size))
        ((= size (length list))
         list)
        (t 
         (subseq 
          (flat
           (let (c)
             (dotimes (i (ceiling (/ size (length list)))) (push list c))
             c))
          0
          size))))
     (export1-909-pattern1 (list n) 
       (mapcar
        #'(lambda (x y)
            (list x (make-sequence 'list y :initial-element 1)))
        list
        (if (listp n)
            (repeat-list n (length list))
          (om:rotate list n)))))
  (let* ((list1 '(8 7 6 5 4 2 2 2 2 2 2 2 2 3 4 2 3 4 4 4 4 4 4 4 4))
         (list2 '(16 16 16 12 12 8 4 8 4 3 5 7 4 4 4 5 6 7 8 9 7 7 7 ))
         (prules '((:S 60)
                   (:S :A 60)
                   (:S :C 60)
                   (:A 67 :A)
                   (:A 60 62 :A)
                   (:A 60 62 64)
                   (:A 62)
                   (:C 60 :B)
                   (:C 64 67 :B)
                   (:C 69 67 65 :B)
                   (:B 67 :B)
                   (:B 65)))
         (prules1 '((:S 60)
                   (:S :A 60)
                   (:S :C 60)
                   (:A 64 :A)
                   (:A 64 62 :A)
                   (:A 62 60 65)
                   (:C :A :C)
                   (:C 69 :B)
                   (:C 69 67 :B)
                   (:C 69 65 67 :B)
                   (:B 67 :B)
                   (:B 65)))
         (ptn (export1-909-pattern1 list1 list2)))
    (let ((enpvs (flat (mapcar #'(lambda (x) (mapprules x prules)) (mapcar #'length (mapcar #'cadr ptn))))))
      (print enpvs)
      (labels
          ((enp-countv (x) (apply #'count-truesv (mapcar #'(lambda (y) (=v y x)) enpvs))))
        (let ((m60s (enp-countv 60))
              (m62s (enp-countv 62))
              (m64s (enp-countv 64))
              (m65s (enp-countv 65))
              (m67s (enp-countv 67))
              (m69s (enp-countv 69)))
          ;(lprint 'm60s m60s 'm62s m62s 'm64s m64s 'm65s m65s 'm67s m67s 'm69s m69s)
          (assert! (andv (>v m60s 0)
                         (orv (>v m62s 0)
                              (>v m64s 0))
                         (>v m65s 0)
                         (orv (>v m67s 0)
                              (>v m69s 0))))
          (let ((soln (one-value
                       (solution enpvs (static-ordering #'linear-force)))))
            (let ((enp (scale-seqc-timepoints (list ptn)
                                              '((4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) (4 4) )
                                              '(8 (1 1))
                                              :enp (list soln))))
              (write-textfile enp "909" "enp"))))))))

(in-package :t2l)
(fail)
(setq puz 
'(_ _ _  _ _ _  _ _ _    
  _ _ _  _ _ _  _ _ _   
  _ _ _  _ _ _  _ _ _    
  _ _ _  _ _ _  _ _ _    
  _ _ _  _ _ _  _ _ _
  _ _ _  _ _ _  _ _ _    
  _ _ _  _ _ _  _ _ _    
  _ _ _  _ _ _  _ _ _
  _ _ _  _ _ _  _ _ _))
(setq puz 
'(_ _ _  _ _ _  _ _ 8    
  _ _ _  6 8 _  3 _ 1   
  _ _ 9  _ _ _  2 _ 7    
  2 _ 4  _ _ 8  _ 1 _    
  _ _ _  2 _ 1  _ _ _
  _ 5 _  9 _ _  8 _ 4    
  6 _ 2  _ _ _  1 _ _    
  3 _ 8  _ 1 5  _ _ _
  4 _ _  _ _ _  _ _ _))
(setq puz 
'(_ _ _  5 _ _  _ _ 2    
  _ _ _  _ _ _  4 8 9   
  _ _ _  _ _ 9  _ _ _    
  _ 8 _  _ _ _  _ _ _    
  _ _ _  _ _ _  7 4 _
  1 9 6  3 _ _  2 _ _    
  _ _ 7  2 _ _  _ 6 _    
  6 _ _  _ 3 _  _ _ 1
  _ 2 _  9 8 _  _ _ _))
(setq puz 
'(_ 2 _  _ 5 _  _ _ 3    
  _ _ 4  _ _ _  8 _ _   
  _ _ _  3 _ _  _ 2 _    
  5 _ _  9 _ _  _ _ 1    
  _ _ _  2 7 _  _ _ 6
  9 1 _  5 _ _  _ 3 _    
  _ _ _  1 _ _  5 _ _    
  _ 5 3  _ 4 _  6 _ _
  _ _ _  _ _ _  _ 1 _))
(setq puz 
'(_ _ _  _ _ _  _ _ _    
  _ 7 _  _ _ 3  _ _ _   
  _ _ _  2 5 1  3 _ _    
  _ _ 8  _ _ 2  _ 7 _    
  4 _ _  _ _ _  _ _ _
  _ 2 _  _ 9 8  _ 4 5    
  _ _ 3  _ _ _  _ _ _    
  7 _ _  6 _ _  1 _ _
  6 _ 1  _ _ 4  _ 2 3))

(setq puz 
'(2 _ _  _ _ _  _ _ _    
  _ _ 7  _ 6 3  _ 2 _   
  9 _ 6  _ _ 7  _ _ 5    
  _ 2 _  _ _ _  _ 4 _    
  _ _ 8  4 _ _  _ 5 _
  _ _ _  _ 7 _  _ _ 1    
  _ _ _  1 _ _  4 _ 9    
  _ 5 _  2 9 _  _ 1 8
  1 _ _  _ _ _  _ _ _))
(setq puz 
'(2 _ _  _ _ _  _ _ _    
  _ _ 7  _ 6 3  _ 2 _   
  9 _ 6  _ _ 7  _ _ 5    
  _ 2 _  _ _ _  _ 4 _    
  _ _ 8  4 _ _  _ 5 _
  _ _ _  _ 7 _  _ _ 1    
  _ _ _  1 _ _  4 _ 9    
  _ 5 _  2 9 _  _ 1 8
  1 _ _  _ _ _  _ _ _))
(setq puz 
'(8 _ _  _ _ _  _ _ _    
  _ _ 3  6 _ _  _ _ _   
  _ 7 _  _ 9 1  2 8 _    
  _ 5 _  _ _ 7  _ _ _    
  _ _ _  _ 4 5  7 _ _
  _ _ _  1 _ _  _ 3 _ 
  _ _ 1  _ _ _  _ 6 8 
  _ _ 8  5 _ _  _ 1 _
  _ 9 _  _ _ _  4 _ _))
'(8 1 2 7 5 3 6 4 9 9 4 3 6 8 2 1 7 5 6 7 5 4 9 1 2 8 3 1 5 4 2 3 7 8 9 6 3 6 9 8 4 5 7 2 1 2 8 7 1 6 9 5 3 4 5 2 1 9 7 4 3 6 8 4 3 8 5 2 6 9 1 7 7 9 6 3 1 8 4 5 2)
(setq puz 
'(_ _ _  6 _ _  2 _ _    
  8 _ 4  _ 3 _  _ _ _   
  _ _ _  _ _ 9  _ _ _    
  4 _ 5  _ _ _  _ _ 7    
  7 1 _  _ _ _  _ _ _
  _ _ 3  _ 5 _  _ _ 8 
  3 _ _  _ 7 _  _ _ 4 
  _ _ _  _ _ 1  9 _ _
  _ _ _  2 _ _  _ 6 _))
'(9 7 1 6 8 4 2 3 5 8 6 4 5 3 2 7 9 1 5 3 2 7 1 9 4 8 6 4 8 5 9 6 3 1 2 7 7 1 6 4 2 8 3 5 9 2 9 3 1 5 7 6 4 8 3 2 9 8 7 6 5 1 4 6 5 8 3 4 1 9 7 2 1 4 7 2 9 5 8 6 3)

(setq puz 
'(_ _ 3  6 _ 4  9 _ _    
  _ _ _  _ 5 _  _ _ _   
  9 _ _  _ _ _  _ _ 7    
  2 _ _  _ _ _  _ _ 6    
  _ 4 _  _ _ _  _ 5 _
  8 _ _  _ _ _  _ _ 1 
  1 _ _  _ _ _  _ _ 5
  _ _ _  _ _ _  _ _ _ 
  _ 9 2  7 3 6  4 1 _))
'(7 5 3 6 1 4 9 8 2 6 2 8 9 5 7 1 3 4 9 1 4 3 8 2 5 6 7 2 7 5 1 9 3 8 4 6 3 4 1 2 6 8 7 5 9 8 6 9 4 7 5 3 2 1 1 3 6 8 4 9 2 7 5 4 8 7 5 2 1 6 9 3 5 9 2 7 3 6 4 1 8)

(time
 (one-value
  (solution (sudoku puz)
            (reorder #'domain-size
                     #'(lambda (x) (declare (ignore x)) nil)
                     #'>
                     #'linear-force))
  'fail))

(progn
  (setq s (time
         (one-value (solution (sudoku puz)
                              (static-ordering #'divide-and-conquer-force))
                 'fail)))
  (mapcar #'print (rows s))
  nil)

(progn
  (setq s
         (one-value (solution (sudoku puz)
                              (reorder #'domain-size
                                       #'(lambda (x) (declare (ignore x)) nil)
                                       #'<
                                       #'linear-force))
                 'fail))
  (mapcar #'print (rows s))
  nil)

(progn
  (setq s (time (one-value (solution (sudoku puz)
                                (reorder #'domain-size
                                         #'(lambda (x) (declare (ignore x)) nil)
                                         #'<
                                         #'divide-and-conquer-force))
                      'fail)))
  (mapcar #'print (rows s))
  nil)
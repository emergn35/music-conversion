(in-package :t2l)
(setq fseq-m '((:S :O)
               (:S :P)
               (:S :T)
               (:S :S :S)
               (:T :O :P :Q :R)
               (:T :U :V :W :X)
               (:T :V :W)
               (:O 15)
               (:O 14)
               (:O 10)
               (:O 9)
               (:P -9)
               (:P -8)
               (:Q 7)
               (:Q 5)
               (:R -4)
               (:R -3)
               (:R -2)
               (:U -15)
               (:U -14)
               (:U -10)
               (:O -9)
               (:V 9)
               (:V 8)
               (:W 7)
               (:W 5)
               (:X 4)
               (:X 3)
               (:X 2)))
(setq fseq-t '((:S :C)
               (:S :D)
               (:S :S :S)
               (:C :E)
               (:C :F)
               (:C :C :C)
               (:D :J)
               (:D :K)
               (:D :D :D)
               (:E -4 -1)
               (:E -3 -2)
               (:E -3 -1)
               (:E -2 -2)
               (:E -2 -1)
               (:F 4 1)
               (:F 3 2)
               (:F 3 1)
               (:F 2 2)
               (:F 2 1)
               (:J -3)
               (:J -2)
               (:K 3)
               (:K 2)))
(setq seqc (mapcar
            #'(lambda (x)
                (mapprules x
                           prules
                           :input-process-increment 8
                           :listdxx t
                           :min 50
                           :max 77))
            '(18 18 18)))
(
(assert! (seqcx-ival-countv seqc 
                            '((0 .1)
                              (1 .12)
                              (2 .6)
                              (6 .8))))
(setq soln (ith-value 0 (solution seqc (reorder #'domain-size #'(lambda (x) (declare (ignore x)) nil) #'< #'linear-force))))